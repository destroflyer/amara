package amara.applications.ingame.entitysystem;

import amara.applications.ingame.entitysystem.synchronizing.ParallelNetworkSystems;
import amara.applications.ingame.entitysystem.systems.aggro.*;
import amara.applications.ingame.entitysystem.systems.ai.*;
import amara.applications.ingame.entitysystem.systems.attributes.*;
import amara.applications.ingame.entitysystem.systems.audio.*;
import amara.applications.ingame.entitysystem.systems.buffs.*;
import amara.applications.ingame.entitysystem.systems.buffs.areas.*;
import amara.applications.ingame.entitysystem.systems.buffs.stacks.*;
import amara.applications.ingame.entitysystem.systems.camps.*;
import amara.applications.ingame.entitysystem.systems.cleanup.*;
import amara.applications.ingame.entitysystem.systems.commands.*;
import amara.applications.ingame.entitysystem.systems.effects.*;
import amara.applications.ingame.entitysystem.systems.effects.aggro.*;
import amara.applications.ingame.entitysystem.systems.effects.audio.*;
import amara.applications.ingame.entitysystem.systems.effects.buffs.*;
import amara.applications.ingame.entitysystem.systems.effects.buffs.areas.*;
import amara.applications.ingame.entitysystem.systems.effects.buffs.stacks.*;
import amara.applications.ingame.entitysystem.systems.effects.crowdcontrol.*;
import amara.applications.ingame.entitysystem.systems.effects.damage.*;
import amara.applications.ingame.entitysystem.systems.effects.game.*;
import amara.applications.ingame.entitysystem.systems.effects.general.*;
import amara.applications.ingame.entitysystem.systems.effects.heal.*;
import amara.applications.ingame.entitysystem.systems.effects.movement.*;
import amara.applications.ingame.entitysystem.systems.effects.physics.*;
import amara.applications.ingame.entitysystem.systems.effects.players.*;
import amara.applications.ingame.entitysystem.systems.effects.popups.*;
import amara.applications.ingame.entitysystem.systems.effects.spawns.*;
import amara.applications.ingame.entitysystem.systems.effects.spells.*;
import amara.applications.ingame.entitysystem.systems.effects.triggers.*;
import amara.applications.ingame.entitysystem.systems.effects.units.*;
import amara.applications.ingame.entitysystem.systems.effects.vision.*;
import amara.applications.ingame.entitysystem.systems.effects.visuals.*;
import amara.applications.ingame.entitysystem.systems.general.*;
import amara.applications.ingame.entitysystem.systems.movement.*;
import amara.applications.ingame.entitysystem.systems.objectives.*;
import amara.applications.ingame.entitysystem.systems.physics.*;
import amara.applications.ingame.entitysystem.systems.players.*;
import amara.applications.ingame.entitysystem.systems.shop.*;
import amara.applications.ingame.entitysystem.systems.specials.erika.*;
import amara.applications.ingame.entitysystem.systems.spells.*;
import amara.applications.ingame.entitysystem.systems.spells.casting.*;
import amara.applications.ingame.entitysystem.systems.units.*;
import amara.applications.ingame.entitysystem.systems.units.scores.*;
import amara.applications.ingame.entitysystem.systems.visuals.*;
import amara.applications.ingame.network.messages.objects.commands.PlayerCommand;
import amara.applications.ingame.shared.maps.Map;
import amara.core.Queue;
import amara.libraries.entitysystem.EntitySystem;
import amara.libraries.physics.intersectionHelper.PolyMapManager;

import java.util.Collections;
import java.util.LinkedList;

public class GameLogic {

    public GameLogic(Map map, int teamsCount, Queue<PlayerCommand> playerCommandsQueue, ExecuteAIActionsSystem.EntityBotsMap entityBotsMap) {
        this.map = map;
        this.teamsCount = teamsCount;
        this.playerCommandsQueue = playerCommandsQueue;
        this.entityBotsMap = entityBotsMap;
    }
    private Map map;
    private int teamsCount;
    private Queue<PlayerCommand> playerCommandsQueue;
    private ExecuteAIActionsSystem.EntityBotsMap entityBotsMap;

    public LinkedList<EntitySystem> createEntitySystems() {
        IntersectionObserver intersectionObserver = new IntersectionObserver();
        PolyMapManager polyMapManager = map.getPhysicsInformation().getPolyMapManager();
        polyMapManager.calcNavigationMap(1.5);

        LinkedList<EntitySystem> entitySystems = new LinkedList<>();
        entitySystems.add(new SetAutoAttacksCastAnimationsSystem());
        entitySystems.add(new SetSpellsCastersSystem());
        entitySystems.add(new SetBaseCooldownSystem());
        entitySystems.add(new LinkedCooldownsSystem());
        entitySystems.add(new SetLevelExperienceSystem());
        entitySystems.add(new RemoveAudiosAfterPlayingSystem());
        Collections.addAll(entitySystems, ParallelNetworkSystems.generateSystems());
        entitySystems.add(new CountdownLifetimeSystem());
        entitySystems.add(new CountdownBuffsSystem());
        entitySystems.add(new CountdownCooldownSystem());
        entitySystems.add(new CountdownBindingSystem());
        entitySystems.add(new CountdownBindingImmuneSystem());
        entitySystems.add(new CountdownSilenceSystem());
        entitySystems.add(new CountdownSilenceImmuneSystem());
        entitySystems.add(new CountdownStunSystem());
        entitySystems.add(new CountdownStunImmuneSystem());
        entitySystems.add(new CountdownKnockupSystem());
        entitySystems.add(new CountdownKnockupImmuneSystem());
        entitySystems.add(new CountdownReactionsSystem());
        entitySystems.add(new CountdownEffectDelaySystem());
        entitySystems.add(new CountdownCampRespawnSystem());
        entitySystems.add(new CountdownAnimationLoopsSystem());
        entitySystems.add(new CountdownAggroResetTimersSystem());
        entitySystems.add(new CountdownInCombatSystem());
        entitySystems.add(new CheckOpenObjectivesSystem());
        entitySystems.add(new CheckAggroTargetAttackabilitySystem());
        entitySystems.add(new CheckAggroTargetSightSystem());
        entitySystems.add(new CheckMaximumAggroRangeSystem());
        entitySystems.add(new CheckBuffStacksUpdateAttributesSystem());
        entitySystems.add(new LevelUpSystem());
        entitySystems.add(new UpdateAttributesSystem());
        entitySystems.add(new TriggerUnitsPassivesSystem());
        entitySystems.add(new TriggerItemPassivesSystem());
        CastSpellQueueSystem castSpellQueueSystem = new CastSpellQueueSystem();
        entitySystems.add(new ExecutePlayerCommandsSystem(playerCommandsQueue, castSpellQueueSystem));
        entitySystems.add(new ExecuteAIActionsSystem(entityBotsMap));
        entitySystems.add(new AggroResetTimersSystem());
        entitySystems.add(new AutoAggroSystem());
        entitySystems.add(new AttackMoveSystem());
        entitySystems.add(new CheckCampUnionAggroSystem());
        entitySystems.add(new CheckCampInCombatSystem());
        entitySystems.add(new ResetOutOfCombatCampsSystem());
        entitySystems.add(new SetNewCampCombatSpellsOnCooldownSystem());
        entitySystems.add(new CastSpellOnCooldownWhileAttackingSystem(castSpellQueueSystem));
        entitySystems.add(new PerformAutoAttacksSystem(castSpellQueueSystem));
        entitySystems.add(castSpellQueueSystem);
        entitySystems.add(new SetCastDurationOnCastingSystem());
        entitySystems.add(new SetCooldownOnCastingSystem());
        entitySystems.add(new ConsumeItemsOnCastingSystem());
        entitySystems.add(new PlayCastAnimationSystem());
        entitySystems.add(new CastSpellSystem());
        entitySystems.add(new UpdateAreaTransformsSystem());
        entitySystems.add(new CheckAreaBuffsSystem(intersectionObserver));
        entitySystems.add(new RemoveBuffsSystem());
        entitySystems.add(new RepeatingBuffEffectsSystem());
        // Cleanup effects here, so effect impact entities aren't observed
        entitySystems.add(new CleanupEffectsSystem());
        entitySystems.add(new CalculateEffectImpactSystem());
        // Cleanup effect triggers here, so they have been triggered before being removed
        entitySystems.add(new CleanupEffectTriggersSystem());
        entitySystems.add(new ApplyPlayCinematicSystem());
        entitySystems.add(new ApplyDrawTeamAggroSystem());
        entitySystems.add(new ApplyPlayAudioSystem());
        entitySystems.add(new ApplyStopAudioSystem());
        entitySystems.add(new ApplyRemoveBuffsSystem());
        entitySystems.add(new ApplyRemoveBuffAreasSystem());
        entitySystems.add(new ApplyAddBuffsSystem());
        entitySystems.add(new ApplyAddBuffAreasSystem());
        entitySystems.add(new ApplyAddStacksSystem());
        entitySystems.add(new ApplyClearStacksSystem());
        entitySystems.add(new ApplyRemoveStacksSystem());
        entitySystems.add(new ApplyAddBindingImmuneSystem());
        entitySystems.add(new ApplyAddBindingSystem());
        entitySystems.add(new ApplyRemoveBindingSystem());
        entitySystems.add(new ApplyAddSilenceImmuneSystem());
        entitySystems.add(new ApplyAddSilenceSystem());
        entitySystems.add(new ApplyRemoveSilenceSystem());
        entitySystems.add(new ApplyAddStunImmuneSystem());
        entitySystems.add(new ApplyAddStunSystem());
        entitySystems.add(new ApplyRemoveStunSystem());
        entitySystems.add(new ApplyAddKnockupImmuneSystem());
        entitySystems.add(new ApplyAddKnockupSystem());
        entitySystems.add(new ApplyRemoveKnockupSystem());
        entitySystems.add(new ApplyAddTargetabilitySystem());
        entitySystems.add(new ApplyRemoveTargetabilitySystem());
        entitySystems.add(new ApplyAddVulnerabilitySystem());
        entitySystems.add(new ApplyRemoveVulnerabilitySystem());
        entitySystems.add(new ApplyPhysicalDamageSystem());
        entitySystems.add(new ApplyMagicDamageSystem());
        entitySystems.add(new ApplyHealSystem());
        entitySystems.add(new ApplyStopSystem());
        entitySystems.add(new ApplyMoveSystem());
        entitySystems.add(new ApplyTeleportSystem());
        entitySystems.add(new ApplyActivateHitboxSystem());
        entitySystems.add(new ApplyAddCollisiongGroupsSystem());
        entitySystems.add(new ApplyDeactivateHitboxSystem());
        entitySystems.add(new ApplyRemoveCollisiongGroupsSystem());
        entitySystems.add(new ApplyDisplayPlayerAnnouncementsSystem());
        entitySystems.add(new ApplyAddPopupsSystem());
        entitySystems.add(new ApplyRemovePopupsSystem());
        entitySystems.add(new ApplySpawnsSystems());
        entitySystems.add(new ApplyAddAutoAttackSpellEffectsSystem());
        entitySystems.add(new ApplyAddSpellsSpellEffectsSystem());
        entitySystems.add(new ApplyRemoveSpellEffectsSystem());
        entitySystems.add(new ApplyReplaceSpellsWithExistingSpellsSystem());
        entitySystems.add(new ApplyReplaceSpellsWithNewSpellsSystem());
        entitySystems.add(new ApplyTriggerSpellEffectsSystem());
        entitySystems.add(new ApplyAddGoldSystem());
        entitySystems.add(new ApplyCancelActionsSystem());
        entitySystems.add(new ApplyRespawnSystem(map));
        entitySystems.add(new ApplyAddStealthSystem());
        entitySystems.add(new ApplyRemoveStealthSystem());
        entitySystems.add(new ApplyPlayAnimationsSystem());
        entitySystems.add(new ApplyStopAnimationsSystem());
        entitySystems.add(new ApplyAddComponentsSystem());
        entitySystems.add(new ApplyAddEffectTriggersSystem());
        entitySystems.add(new ApplyFinishObjectivesSystem());
        entitySystems.add(new ApplyRemoveComponentsSystem());
        entitySystems.add(new ApplyRemoveEffectTriggersSystem());
        entitySystems.add(new ApplyRemoveEntitySystem());
        entitySystems.add(new ApplyTriggerErikaPassivesSystem());
        entitySystems.add(new SetInCombatSystem());
        entitySystems.add(new DrawAggroOnDamageSystem());
        entitySystems.add(new ResetAggroTimerOnDamageSystem());
        entitySystems.add(new UpdateDamageHistorySystem());
        entitySystems.add(new TriggerDamageTakenSystem());
        entitySystems.add(new LifestealSystem());
        entitySystems.add(new RemoveAppliedEffectImpactsSystem());
        entitySystems.add(new HealthRegenerationSystem());
        entitySystems.add(new DeathSystem());
        entitySystems.add(new TriggerDeathEffectSystem());
        entitySystems.add(new TriggerTeamDeathEffectSystem());
        entitySystems.add(new MaximumHealthSystem());
        entitySystems.add(new MaximumStacksSystem());
        entitySystems.add(new GoldGenerationSystem());
        entitySystems.add(new PayOutBountiesSystem());
        entitySystems.add(new UpdateDeathsScoreSystem());
        entitySystems.add(new CompleteDeathSystem());
        entitySystems.add(new CampResetSystem());
        entitySystems.add(new CheckDeadCampsRespawnSystem());
        entitySystems.add(new CampSpawnSystem());
        entitySystems.add(new RemoveFinishedMovementsSystem());
        entitySystems.add(new PlayMovementAnimationsSystem());
        entitySystems.add(new UpdateWalkMovementsSystem());
        entitySystems.add(new TargetedMovementSystem(intersectionObserver, polyMapManager));
        entitySystems.add(new LocalAvoidanceSystem());
        entitySystems.add(new MovementSystem());
        entitySystems.add(new CheckDistanceLimitMovementsSystem());
        entitySystems.add(new TriggerTargetReachedEffectSystem());
        entitySystems.add(new FinishTargetedMovementsSystem());
        entitySystems.add(new CheckHiddenAreasSystem(intersectionObserver));
        // Add 1 for the neutral team
        entitySystems.add(new TeamVisionSystem(teamsCount + 1, map.getPhysicsInformation().getObstacles()));
        entitySystems.add(new TriggerCollisionEffectSystem(intersectionObserver));
        entitySystems.add(new TriggerCastingFinishedEffectSystem());
        entitySystems.add(new TriggerFinishedObjectivesEffctSystem());
        entitySystems.add(new TriggerStacksReachedEffectSystem());
        entitySystems.add(new TriggerRepeatingEffectSystem());
        entitySystems.add(new TriggerInstantEffectSystem());
        entitySystems.add(new CheckCampMaximumAggroDistanceSystem());
        entitySystems.add(new SetIdleAnimationsSystem());
        entitySystems.add(new IntersectionPushSystem(intersectionObserver));
        entitySystems.add(new MapIntersectionSystem(polyMapManager));
        entitySystems.add(new RespawnableDeathSystem());
        entitySystems.add(new RespawnPlayersSystem(map));
        entitySystems.add(new CleanupUnitsSystem());
        entitySystems.add(new CleanupSpellsSystem());
        entitySystems.add(new CleanupMovementsSystem());
        entitySystems.add(new CleanupBuffAreasSystem());
        entitySystems.add(new CleanupBuffsSystem());
        return entitySystems;
    }
}
