package amara.applications.master.client.launcher.panels;

import javax.swing.JPanel;
import amara.applications.master.client.MasterserverClientUtil;
import amara.applications.master.client.launcher.network.backends.*;
import amara.libraries.network.NetworkClient;

public class PanPlay extends javax.swing.JPanel {

    public PanPlay(PanMainMenu panMainMenu) {
        initComponents();
        panSelectGameMode = new PanSelectGameMode();
        panLobby = new PanLobby();
        panGameSelection = new PanGameSelection();
        panIngame = new PanIngame();
        if (MasterserverClientUtil.isIngame()) {
            displayIngamePanel();
        } else {
            displaySelectGameModePanel();
        }
        NetworkClient networkClient = MasterserverClientUtil.getNetworkClient();
        networkClient.addMessageBackend(new GenericInformationBackend(panMainMenu));
        networkClient.addMessageBackend(new UpdateLobbyBackend(this));
        networkClient.addMessageBackend(new ClosedLobbyBackend(this));
        networkClient.addMessageBackend(new LobbyQueueStatusBackend(panLobby));
        networkClient.addMessageBackend(new GameSelectionAcceptBackend(this));
        networkClient.addMessageBackend(new UpdateGameSelectionBackend(this));
        networkClient.addMessageBackend(new DisplayGameCreatedBackend(this));
        networkClient.addMessageBackend(new DisplayGameEndedBackend(this));
    }
    private PanSelectGameMode panSelectGameMode;
    private PanLobby panLobby;
    private PanGameSelection panGameSelection;
    private PanIngame panIngame;

    public void displaySelectGameModePanel() {
        setDisplayedPanel(panSelectGameMode);
    }

    public void displayLobbyPanel() {
        if (setDisplayedPanel(panLobby)) {
            panLobby.reset();
        }
    }

    public void displayGameSelectionPanel() {
        if (setDisplayedPanel(panGameSelection)) {
            panGameSelection.reset();
        }
    }

    public void displayIngamePanel() {
        setDisplayedPanel(panIngame);
    }

    private boolean setDisplayedPanel(JPanel panel) {
        if ((getComponentCount() == 0) || (panel != getComponent(0))) {
            removeAll();
            add(panel);
            updateUI();
            return true;
        }
        return false;
    }

    public PanLobby getPanLobby() {
        return panLobby;
    }

    public PanGameSelection getPanGameSelection() {
        return panGameSelection;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
