/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 02.08.2012, 23:50:37
 */
package amara.launcher.client;

import java.awt.Insets;
import javax.swing.JPanel;
import javax.swing.UIManager;
import amara.applications.master.network.messages.*;
import amara.applications.master.network.messages.objects.AuthentificationInformation;
import amara.engine.applications.masterserver.client.MasterserverClientApplication;
import amara.engine.applications.masterserver.client.appstates.*;
import amara.engine.applications.masterserver.client.appstates.LoginAppState.LoginResult;
import amara.engine.network.NetworkClient;
import amara.launcher.client.panels.*;
import amara.libraries.applications.headless.appstates.NetworkClientHeadlessAppState;
import amara.libraries.applications.windowed.FrameUtil;

/**
 *
 * @author Carl
 */
public class MainFrame extends javax.swing.JFrame{

    public MainFrame(PanLogin panLogin){
        initComponents();
        instance = this;
        this.panLogin = panLogin;
        setDisplayedPanel(panLogin);
        panLogin.start();
        FrameUtil.initFrameSpecials(this);
        FrameUtil.centerFrame(this);
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(-1, 0, 0, 0));
        setSize(650, 400);
    }
    private static MainFrame instance;
    private PanLogin panLogin;
    
    public void setDisplayedPanel(JPanel panel){
        panContainer.removeAll();
        panContainer.add(panel);
        panContainer.updateUI();
    }
    
    public void login(final AuthentificationInformation authentificationInformation){
        new Thread(new Runnable(){

            @Override
            public void run(){
                panLogin.showIsLoading(true);
                MasterserverClientApplication masterClient = MasterserverClientApplication.getInstance();
                NetworkClient networkClient = masterClient.getStateManager().getState(NetworkClientHeadlessAppState.class).getNetworkClient();
                networkClient.sendMessage(new Message_Login(authentificationInformation));
                LoginAppState loginAppState = masterClient.getStateManager().getState(LoginAppState.class);
                loginAppState.onLoginPending();
                LoginResult loginResult;
                while(true){
                    if(loginAppState.getResult() != LoginAppState.LoginResult.PENDING){
                        loginResult = loginAppState.getResult();
                        break;
                    }
                    try{
                        Thread.sleep(100);
                    }catch(Exception ex){
                    }
                }
                panLogin.showIsLoading(false);
                switch(loginResult){
                    case FAILED:
                        FrameUtil.showMessageDialog(MainFrame.this, "Login failed. Possible reasons:\n\n- Wrong login\n- Wrong password", FrameUtil.MessageType.ERROR);
                        break;
                    
                    case SUCCESSFUL:
                        networkClient.sendMessage(new Message_GetGameContents());
                        ItemsAppState itemsAppState = masterClient.getStateManager().getState(ItemsAppState.class);
                        while(true){
                            if(itemsAppState.getOwnedItems() != null){
                                break;
                            }
                            try{
                                Thread.sleep(100);
                            }catch(Exception ex){
                            }
                        }
                        panLogin.close();
                        setDisplayedPanel(new PanMainMenu());
                        break;
                }
            }
        }).start();
    }

    public static MainFrame getInstance(){
        return instance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panContainer.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panContainer;
    // End of variables declaration//GEN-END:variables
}
